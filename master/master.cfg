# -*- python -*-
# ex: set filetype=python:
import os
import shutil
import subprocess
import threading

import ansi2html
from buildbot.plugins import reporters
from buildbot.plugins import schedulers
from buildbot.plugins import steps
from buildbot.plugins import util
from buildbot.process import properties
from buildbot.worker import libvirt as lv_worker
import git
import six
from twisted.internet import reactor
from twisted.internet import threads

import params

EXIT = object()
c = BuildmasterConfig = {}
REPOSITORY = 'embercsi/ember-csi'

# ###### WORKERS


class LibvirtWorker(lv_worker.LibVirtWorker):
    def stop_instance(self, fast=False):
        """
        I attempt to stop a running VM.
        I make sure any connection to the worker is removed.
        If the VM was using a cloned image, I remove the clone
        When everything is tidied up, I ask that bbot looks for work to do
        """
        @lv_worker.defer.inlineCallbacks
        def _destroy_domain(res, domain):
            lv_worker.log.msg(
                'Graceful shutdown failed. Force destroying domain %s' %
                self.workername)
            # Don't return res to stop propagating shutdown error if destroy
            # was successful.
            yield domain.destroy()

        lv_worker.log.msg("Attempting to stop '%s'" % self.workername)
        if self.domain is None:
            lv_worker.log.msg("I don't think that domain is even running, "
                              "aborting")
            return lv_worker.defer.succeed(None)

        domain = self.domain
        self.domain = None

        if self.graceful_shutdown and not fast:
            lv_worker.log.msg('Graceful shutdown chosen for %s' %
                              self.workername)
            d = domain.shutdown()
            d.addErrback(_destroy_domain, domain)
        else:
            d = domain.destroy()

        if self.base_image:
            @d.addBoth
            def _remove_image(res):
                lv_worker.log.msg('Removing base image %s for %s' %
                                  (self.image, self.workername))
                os.remove(self.image)
                return res

        return d


class GitLogger(threading.Thread):
    ANSI_RESET = '\u001b[0m'
    ANSI_COLORS = {'h': '\u001b[36m',  # Cyan for host messages
                   'o': '',  # Gray for command output
                   'e': '\u001b[31m\u001b[1m'}  # Bold red for errors
    HTML_EMPTY_FILE = '<html><head></head><body></body></html>'
    INDEX_TEMPLATE = ('<html><head></head><body><script>\n'
                      'var files = %(filenames)s;\n'
                      'var body = "";\n'
                      'var url = window.location.href;\n'
                      'if (url.endsWith(".html"))\n'
                      '    url = url.substring(0, url.lastIndexOf("/"));\n'
                      'for (var i = 0; i < files.length; i++)\n'
                      '    body += "<a href=\\"" + url + "/" + files[i] +'
                      ' "\\">" + files[i] + "<\\a><br>";\n'
                      'document.write(body);\n'
                      '</script></body></html>')

    def __init__(self, path, remote, branch, master):
        super(GitLogger, self).__init__()
        # remote must be https and include user and token to work
        # if they don't want to add it like that, then they can setup SSH
        self.path = path
        self.remote = remote
        self.branch = branch
        self.master = master
        self.converter = ansi2html.Ansi2HTMLConverter(linkify=True)
        try:
            self.repo = git.Repo(path)
        except Exception:
            # Cannot use git.Repo.clone_from because it doesn't accept
            # --single-branch
            null_fd = open(os.devnull, 'w')
            subprocess.check_call(['git', 'clone', '--single-branch',
                                   '--branch=' + branch, remote, path],
                                  stdout=null_fd)
            self.repo = git.Repo(path)
        else:
            getattr(self.repo.heads, branch).checkout()
            self.repo.remotes.origin.pull()

        self.queue = six.moves.queue.Queue(maxsize=-1)
        # This should be done gracefully to ensure we upload everything
        self.daemon = True
        self.start()

    def run(self):
        print('Tread running')
        while True:
            build = self.queue.get(block=True)
            if build is EXIT:
                print('Exit requested')
                return
            print('Saving logs to local git repo for build %s' % build)
            steps = threads.blockingCallFromThread(
                reactor,
                self.master.data.get, ('builds', build['buildid'], 'steps'))
            build_log_dir = os.path.join(self.path, self.get_id(build))

            # Remove the directory in case it exists
            try:
                shutil.rmtree(build_log_dir)
            except FileNotFoundError:
                pass
            os.makedirs(build_log_dir, exist_ok=True)

            new_files = []
            for i, step in enumerate(steps):
                filename = os.path.join(
                    build_log_dir, '%s-%s' % (i, step['name']))
                logs = threads.blockingCallFromThread(
                    reactor,
                    self.master.data.get,
                    ('steps', step['stepid'], 'logs'))
                if len(logs):
                    for log in logs:
                        if log['name'] == 'stdio':
                            name = filename + '.html'
                        else:
                            name = '%s-%s.html' % (filename, log['name'])
                        with open(name, 'w') as f:
                            data = self.get_html(log)
                            f.write(data)
                        new_files.append(name)

                else:
                    name = filename + '.html'
                    with open(name, 'w') as f:
                        f.write(self.HTML_EMPTY_FILE)
                    new_files.append(name)

            self.generate_index(build_log_dir, new_files)
            self.repo.index.add([self.get_id(build)])
            actor = git.Actor(self.branch, 'author@example.com')
            self.repo.index.commit('Logs for build %s' % self.get_id(build),
                                   author=actor, committer=actor)
            self.repo.remotes.origin.push()

    def generate_index(self, path, files):
        index_filename = os.path.join(path, 'index.html')
        filenames = [os.path.basename(f) for f in files]
        index_contents = self.INDEX_TEMPLATE % {'filenames': filenames}
        with open(index_filename, 'w+') as f:
            f.write(index_contents)

    def get_html(self, log):
        def add_ansi_color(line):
            if line:
                start = line[0]
                line = line[1:]
                code = self.ANSI_COLORS[start]
                if code:
                    return code + line + self.ANSI_RESET
            return line

        data = threads.blockingCallFromThread(
            reactor,
            self.master.db.logs.getLogLines,
            log['logid'], 0, log['num_lines'])

        ansi = [add_ansi_color(line) for line in data.split('\n')]
        html = self.converter.convert('\n'.join(ansi))
        return html

    @staticmethod
    def get_id(build):
        return str(build['buildid'])

    def upload(self, build):
        self.queue.put(build)
        return ('https://htmlpreview.github.io/?'
                'https://raw.githubusercontent.com/embercsi/3rd-party-ci-logs/'
                '%s/%s/index.html' % (self.branch, self.get_id(build)))
        # return 'https://github.com/embercsi/3rd-party-ci-logs/tree/%s/%s' % (
        #     self.branch, self.get_id(build))

    def stop_and_wait(self):
        self.queue.put(EXIT)
        self.join()


class GitLoggerStatusWrapper(reporters.GitHubStatusPush):
    @lv_worker.defer.inlineCallbacks
    def reconfigService(self, token, **kwargs):
        # TODO: don't recreate the gitlogger
        token = yield self.renderSecrets(token)
        pwd = os.path.dirname(os.path.realpath(__file__))
        path = os.path.join(pwd, 'logs')
        remote = 'https://%s:%s@github.com/embercsi/3rd-party-ci-logs.git' % (
            params.GH_USER, params.GH_TOKEN)
        self.logger = GitLogger(path, remote, params.DRIVER_NAME, self.master)
        res = yield super(GitLoggerStatusWrapper, self).reconfigService(
            token, **kwargs)
        return res

    # @lv_worker.defer.inlineCallbacks
    def send(self, build):
        build = build.copy()
        if build['complete']:
            build['url'] = self.logger.upload(build)
        else:
            build['url'] = None
        return super(GitLoggerStatusWrapper, self).send(build)
        # res = yield super(GitLoggerStatusWrapper, self).send(build)
        # return res


# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [
    LibvirtWorker(params.WORKER_NAME, params.WORKER_PASSWORD,
                  util.Connection('qemu:///session'),
                  params.IMAGE_LOCATION + '.' + params.WORKER_NAME,
                  params.IMAGE_LOCATION,
                  xml=params.WORKER_XML,
                  build_wait_timeout=0),
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that
# workers could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': int(params.BUILDBOT_WORKER_PORT)}}

# ###### SCHEDULERS

# Maybe we should probably use AnyBranchScheduler
c['schedulers'] = [
    schedulers.SingleBranchScheduler(
        name='embercsi',
        # change_filter=util.ChangeFilter(project='embercsi/ember-csi',
        change_filter=util.ChangeFilter(
            project=REPOSITORY,
            branch_re='master|refs/pull/\d+/merge'),
        treeStableTimer=3,
        builderNames=[params.DRIVER_NAME]),
    schedulers.ForceScheduler(
        name='force',
        builderNames=[params.DRIVER_NAME]),
]

# ###### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform
# a build: what steps, and which workers can execute them.  Note that any
# particular build will only take place on one worker.


def upload_step(value, filename, string_format='%s'):
    if value:
        if os.path.isfile(value):
            return steps.FileDownload(name='Send ' + filename,
                                      mastersrc=value,
                                      workerdest='/root/' + filename,
                                      mode=0o755,
                                      haltOnFailure=True)
        # util.Interpolate("%(src::branch)s-%(prop:got_revision)s\n"),
        return steps.StringDownload(name='Write ' + filename,
                                    s=string_format % value,
                                    workerdest='/root/' + filename,
                                    mode=0o755,
                                    haltOnFailure=True)
    return None


def ember_steps():
    result = [
        steps.GitHub(name='Retrieve code',
                     repourl='git://github.com/' + REPOSITORY + '.git',
                     mode='full',
                     method='clobber'),
        upload_step(params.PRE_RUN, 'custom-pre-run'),
        upload_step(params.POST_RUN, 'custom-post-run'),
        upload_step(params.DRIVER_CONFIG, 'driver-cfg', "DRIVER_CONFIG='%s'"),
        steps.ShellCommand(
            name='Build image',
            command='sudo docker build -t ember-csi:test -f Dockerfile .',
            haltOnFailure=True),
        steps.ShellCommand(name='Pre-run script',
                           command='/root/pre-run',
                           haltOnFailure=True) if params.PRE_RUN else None,
        steps.ShellCommand(name='Run tests',
                           command='/root/test-ember',
                           haltOnFailure=False,
                           logfiles={'ember-csi': '/var/log/ember-csi.log'}),
        steps.ShellCommand(name='Post-run script',
                           command='/root/post-run',
                           alwaysRun=True) if params.POST_RUN else None,
    ]
    return result


factory_steps = ember_steps()
factory = util.BuildFactory(factory_steps)

c['builders'] = [
    util.BuilderConfig(name=params.DRIVER_NAME,
                       workernames=[params.WORKER_NAME],
                       factory=factory),
]

# ###### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

context = properties.Interpolate('3rdparty/%(prop:buildername)s')
gs = GitLoggerStatusWrapper(token=params.GH_TOKEN,
                            context=context,
                            startDescription='Build started.',
                            endDescription='Build done.',
                            builders=[params.DRIVER_NAME])
c['services'] = [gs]


# ###### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['buildbotNetUsageData'] = None
c['title'] = 'Ember-CSI CI'
c['titleURL'] = 'https://github.com/' + REPOSITORY

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.
c['buildbotURL'] = params.BUILDBOT_WEB_URL

# minimalistic config to activate new web UI and GitHub webhook receiver
c['www'] = {
    'port': int(params.BUILDBOT_WEB_PORT),
    'plugins': {'waterfall_view': {}, 'console_view': {}},
    'change_hook_dialects': {'github': {'secret': params.GH_EMBER_SECRET,
                                        'strict': True}},
}

# ###### DB URL
# This specifies what database buildbot uses to store its state.  You can leave
# this at its default for all but the largest installations.
c['db'] = {'db_url': params.BUILDBOT_DB_URL}
